#import account.graphql
#import category.graphql
#import transaction.graphql
#import user.graphql

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    me: User! @auth

    #user(id: ID! @eq): User! @find
    #users: [User!]! @paginate(defaultCount: 10)

    account(id: ID! @eq): Account! @find @can(ability:"view", find: "id") @guard(with: ["api","web"])
    accounts: [Account!]! @paginate(scopes: ["ByLoggedInUser"]) @guard(with: ["api","web"])

    transaction(id: ID! @eq): Transaction! @find @can(ability:"view", find: "id") @guard(with: ["api","web"])
    transactions(where: _ @whereConditions(columns: ["account_id", "type", "category_id", "created_at"])): [Transaction!] @paginate(scopes: ["ByLoggedInUser"]) @guard(with: ["api","web"])

    category(id: ID! @eq): Category! @find @can(ability:"view", find: "id") @guard(with: ["api","web"])
    categories: [Category!] @paginate(scopes: ["ByLoggedInUser"]) @guard(with: ["api","web"])
}

type Mutation {
    #También se podría pasar como name: String!
    createAccount(input: CreateAccountInput! @spread): Account @create @inject(context: "user.id", name: "user_id") @guard(with: ["api","web"])
    updateAccount(id: ID!, input: UpdateAccountInput! @spread): Account @update @can(ability: "update", find: "id") @guard(with: ["api","web"])

    createTransaction(input: CreateTransactionInput! @spread): Transaction! @create @guard(with: ["api","web"])
    updateTransaction(id: ID!, input: UpdateTransactionInput! @spread): Transaction! @update @can(ability: "update", find: "id") @guard(with: ["api","web"])
    deleteTransaction(id: ID!): Transaction! @delete @can(ability: "delete", find: "id") @guard(with: ["api","web"])

    createCategory(input: CreateCategoryInput! @spread): Category @create @inject(context: "user.id", name: "user_id") @guard(with: ["api","web"])
    updateCategory(id: ID!, input: UpdateCategoryInput @spread): Category! @update @can(ability: "update", find: "id") @guard(with: ["api","web"])
    deleteCategory(id: ID!): Category! @delete @can(ability: "delete", find: "id") @guard(with: ["api","web"])
}

#### SI ALGO FALLA
# PUEDE SER LA AUTENTICACION QUE SE CUENTA EN EL MINUTO 60 DEL PRIMER VIDEO